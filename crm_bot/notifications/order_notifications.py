from aiogram import Bot
import logging
from datetime import datetime, timedelta
from sqlalchemy import select
from database.models import Order, Client, Seller
from database.utils import async_session

async def send_order_notification_to_channel(bot: Bot, order: Order, channel_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –≤ –∫–∞–Ω–∞–ª"""
    message_text = (
        "üîî *1-–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ*\n\n"
        f"üÜî *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞*: `#{order.id}`\n"
        f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è*: `{order.created_at.strftime('%d.%m.%Y %H:%M')}`\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç*: {order.client.full_name}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: `{order.client.phone}`\n"
        f"üõí *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞*: `{order.item_count} —à—Ç.`\n"
        f"üíµ *–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞*: `{order.prepaid or 0} —Å—É–º`\n"
        f"üë®‚Äçüíº *–ü—Ä–æ–¥–∞–≤–µ—Ü*: {order.seller.full_name}"
    )
    
    await bot.send_message(
        chat_id=channel_id,
        text=message_text,
        parse_mode="Markdown"
    )
    
async def check_one_day_orders(bot: Bot, channel_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–¢–ï–°–¢–û–í–ê–Ø –í–ï–†–°–ò–Ø)"""
    async with async_session() as session:
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ 1 –¥–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∞
        test_time = datetime.now() - timedelta(minutes=1)
        
        query = (
            select(Order)
            .where(Order.created_at.between(
                test_time - timedelta(minutes=1),
                test_time + timedelta(minutes=1)
            ))
            .join(Client)
            .join(Seller)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"–ò—â–µ–º –∑–∞–∫–∞–∑—ã –º–µ–∂–¥—É: {test_time - timedelta(minutes=1)} –∏ {test_time + timedelta(minutes=1)}")
        
        result = await session.execute(query)
        orders = result.scalars().all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
        
        for order in orders:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
            await send_order_notification_to_channel(bot, order, channel_id)
        
        return len(orders)

# async def check_one_day_orders(bot: Bot, channel_id: str):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è 1 –¥–µ–Ω—å"""
#     async with async_session() as session:
#         one_day_ago = datetime.now() - timedelta(days=1)
        
#         query = (
#             select(Order)
#             .where(Order.created_at.between(
#                 one_day_ago - timedelta(minutes=5),
#                 one_day_ago + timedelta(minutes=5)
#             ))
#             .join(Client)
#             .join(Seller)
#         )
        
#         result = await session.execute(query)
#         orders = result.scalars().all()
        
#         for order in orders:
#             await send_order_notification_to_channel(bot, order, channel_id)
        
#         return len(orders)